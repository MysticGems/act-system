// ===================================================================
// Restrained Life Relay                                             \
// by Jack Abraham                                                \__
// ===================================================================

// Set FLAG_FACE to a negative number if not used in Mystic Gems tools;
// otherwise the blue value of FLAG_FACE on the root prim will be set to
// 1.0 if RLV is enabled, 0.0 if not.
integer FLAG_FACE = 1;

integer active = FALSE;         // Is the relay active
integer external = FALSE;       // Send RLV commands to an external relay
key owner;                      // Who owns the relay

string helpURL =                // URL for documentation
    "https://docs.google.com/document/pub?id=1UVM3q5EDnu5Rade7k69oK1uRIcWjdg2lhhDJm5mAOns";

// -------------------------------------------------------------------
// Permission handling
// -------------------------------------------------------------------

list restrictions;              // strided list of object keys &
                                // restrictions without the "=n" part
key master = NULL_KEY;          // Master; automatically trusted
list trusted =                  // list of trusted object owners
    [ NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY, 
    NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY ];
list untrusted =                // list of untrusted object owners
    [ NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY, 
    NULL_KEY, NULL_KEY, NULL_KEY, NULL_KEY ];
list refused_command =          // Commands not to execute
    [ ];
integer allowOtherRestrict = FALSE;  
                                // Refuse lasting restrictions unless I
                                // originate them

// Are we accepting commands from this object?
list pending_command = [];      // Command we're checking trust for

integer is_trusted( string name, key id, string msg )
{
    list tokens = llParseString2List( msg, [ "," ], [] );
    key who = llGetOwnerKey( id );
    if ( llListFindList( untrusted, [ who ] ) != -1 ||
        llGetListLength( tokens ) < 3 ) 
    {
        // Sender is untrusted or command is malformed
        return FALSE;
    }
    list commands = llParseString2List( llList2String( tokens, 2 ),
        [ "|" ], [] );
    if ( simple_request( commands ) || ~llListFindList( trusted, [who] ) 
        || who == master )
    {
        // Command is simple or sender is trusted
        return TRUE;
    }
    ask_trust( name, who );
    pending_command = [ name, id, msg ];
    return FALSE;
}

// Is this a simple request for information or a meta command like !release?
integer simple_request( list commands ) 
{
    integer len = llGetListLength( commands );
    integer i;
 
    // now check every single atomic command
    for (i=0; i < len; ++i)
    {
        string command = llList2String( commands, i);
        if (!simple_command( command ) )
        {
           return FALSE;
        }
    }
 
    // all atomic commands passed the test
    return TRUE;
}
 
// is this a simple atomic command
// (a command which only queries some information or releases restrictions)
// (e. g.: cmd ends with "=" and a number (@version, @getoutfit, @getattach) 
// or is a !-meta-command)
integer simple_command( string cmd )
{    
    // check right hand side of the "=" - sign
    integer index = llSubStringIndex (cmd, "=");
    // check for a number after the "="
    string param = llGetSubString (cmd, index + 1, -1);
    if (
        (
            (
                (
                    ( (integer)param != 0 || param == "0" )  // valid number and
                    && llSubStringIndex(param, "n") <= -1    // not a new
                    && llSubStringIndex(param, "add") <= -1) // restriction
                || param == "y"                              // allows something
                || param == "rem")                           // remove
            || index == -1)                                  // no parameter
        || llSubStringIndex(cmd, PREFIX_METACOMMAND ) == 0   // metacommand
        || cmd == "@clear") // is it an integer (channel number) or empty?
    {
        return TRUE;
    }
 
    // this one is not "simple".
    return FALSE;
}
 
integer user_channel;
integer user_listener;
ask_trust( string name, key id )
{
    string msg;
    key objOwner = llGetOwnerKey( id );
    msg = "Do you trust " + key2name( objOwner ) + "?";
    ask( msg, [ "Trust", "No Trust" ] );
}

// Is the object in llSay distance
integer nearEnough( key id )
{
    vector myPos = llGetRootPosition();
    vector objPos = llList2Vector ( 
            llGetObjectDetails( id, [ OBJECT_POS ] ), 0 );
    float distance = llVecDist( objPos, myPos );
    return distance <= MAX_OBJECT_DISTANCE;
}

// Is this message addressed to me
integer targets_me( string message )
{
    list parsed = llParseString2List( message, [","], [] );
    if ( llGetListLength( parsed ) != 3 )
        return FALSE;
        
    return ( llList2String( parsed, 1 ) == (string)owner ) ||
        ( llList2String( parsed, 1 ) == (string)NULL_KEY );
}

// --------------------------------------------------------------------
// Execute commands
// --------------------------------------------------------------------

list OUT_OF_RANGE_COMMANDS = [ "!release" ];

handle_commands( string name, key id, string msg, integer inRange )
{
    list parsed = llParseString2List( msg, [","], [] );
    string identifier = llList2String( parsed, 0 );
    list commands = llParseString2List( llList2String( parsed, 2 ),
            [ "|" ], [] );
    integer c = llGetListLength( commands );
    integer i;
    string cmd;
    string prefix;
    for ( i = 0; i < c; i++ )
    {
        cmd = llStringTrim( llList2String( commands, i ), STRING_TRIM );
        if ( inRange || llListFindList( OUT_OF_RANGE_COMMANDS, [ cmd ] ) > -1 )
        {
            prefix = llGetSubString( cmd, 0, 0 );
            if ( prefix == PREFIX_RL_COMMAND )
            {
                RLVcommand( identifier, id, cmd );
            } else if ( prefix == PREFIX_METACOMMAND ) {
                metacommand( identifier, id, cmd );
            }
        }
    }
}

RLVcommand( string title, key id, string cmd )
{
    cmd = llToLower( cmd );
    
    list parsed = llParseString2List( cmd, ["="], [] );
    string behavior = llList2String( parsed, 0 );
    string parameter = llList2String( parsed, 1 );

    integer index = llListFindList( restrictions, [ behavior ] );

    parsed = llParseString2List( cmd, [":"], [] );
    string option = llList2String( parsed, 1 );
    behavior = llList2String( parsed, 0 );

    if ( parameter == "n" || parameter == "add" )
    {       // Add a restriction
        if ( allowOtherRestrict || llGetOwnerKey( id ) == owner ) { 
            if ( index < 0 ) {
                restrictions += [ 
                    llList2String( llParseString2List(behavior, ["="], []), 0 )
                    , id ];
            }
        } else {
            ack( title, id, cmd, "ko" );
            return;
        }
    }
    else if ( parameter == "y" || parameter == "rem" )
    {       // Remove a restrictions
        if ( index > -1 ) {
            restrictions = 
                llDeleteSubList( restrictions, index, index + 1 );
        }
    }
    else if ( behavior == PREFIX_RL_COMMAND + "clear" )
    {
        release_restrictions( id );
    }
    else if ( parameter == "force" ) {
        
        if ( llListFindList ( refused_command, [behavior] ) >= 0 )
        {
            ack( title, id, cmd, "ko" );
            return;
        }
    }
    else if (((integer) parameter <= 0) && (behavior != "@clear"))
    {
        ack( title, id, cmd, "ko");
        return;
    }
    sendCmd( cmd );
    ack( title, id, cmd, "ok" );
}

metacommand( string title, key id, string cmd )
{
    if ( cmd == PREFIX_METACOMMAND + "version" )
    {
        ack( title, id, cmd, (string)RLVRS_PROTOCOL_VERSION );
    } else if ( cmd == PREFIX_METACOMMAND + "release" ) {
        release_restrictions( id );
        ack( title, id, cmd, "ok" );
    } else if ( cmd == PREFIX_METACOMMAND + "implversion" ) {
        ack( title, id, cmd, RLVRS_IMPLEMENTATION );
    }
}

release_restrictions( key id )
{
    integer i;
    integer c = llGetListLength( restrictions );
    list newRestrictions;
    for ( i=0; i < c; i += 2 )
    {
        if ( llList2Key( restrictions, i+1 ) == id ) {
            sendCmd( llList2String( restrictions, i ) + "=y" );
        } else {
            newRestrictions += llList2List( restrictions, i, i+1 );
        }
    }
    restrictions = newRestrictions;
    if ( restrictions == [] ) {
        sendCmd( RLV_COMMAND_END );
    }
}

add_trust( key id )
{
    if ( id == NULL_KEY ) return;
    if ( llListFindList( trusted, [ id ] ) == -1 )
    {
        trusted += [ id ];
        if(llGetListLength(trusted) > 10) 
        {
            trusted = llDeleteSubList(trusted, 2, 2);
        }
        llOwnerSay( "/me RLV Relay: " + key2name(id)
            + " added to white list." );
    }
}

add_untrust( key id )
{
    if ( id == NULL_KEY ) return;
    if ( llListFindList( untrusted, [ id ] ) == -1 )
    {
        untrusted += [ id ];
        if(llGetListLength(untrusted) > 10) 
        {
            untrusted = llDeleteSubList(untrusted, 1, 1);
        }
        llOwnerSay( "/me RLV Relay: " + key2name(id)
            + " added to black list." );
    }
}

// --------------------------------------------------------------------
// Followers
// --------------------------------------------------------------------

key followMe;
float followRange;
float followTau;
float SCAN_RANGE = 20.0;

follow()
{
    vector me = get_pos( llGetOwner() );
    vector him = get_pos( followMe );
    if ( llVecDist( me, him ) > followRange ) {
        llMoveToTarget( him, followTau );
    } else {
        llStopMoveToTarget();
    }
}

vector get_pos( key id )
{
    return llList2Vector( llGetObjectDetails( id, [ OBJECT_POS ] ), 0 );
}

// --------------------------------------------------------------------
// Listen handlers
// --------------------------------------------------------------------
integer agentListen;                // Handler for agent listeners

agent_query( string query )
{
    agentListen = llListen( AGENT_CHANNEL, "", llGetOwner(), "" );
    llSetTimerEvent( RESPONSE_TIMEOUT );
    llOwnerSay( query + "=" + (string)AGENT_CHANNEL );
}

relay_message( string name, key id, string msg )
{
    if ( !active ) return;

    if ( !targets_me( msg ) ) return;

    if ( !is_trusted( name, id, msg ) ) return;

    handle_commands( name, id, msg, nearEnough( id ) );
}

dialog_responses( string msg ) {
    if ( msg == "Trust" ) {
        add_trust( llGetOwnerKey( llList2Key( pending_command, 1 ) ) );
        relay_message( llList2String( pending_command, 0 ),
            llList2Key( pending_command, 1 ),
            llList2String( pending_command, 2 ) );
    } else if ( msg == "No Trust" ) {
        add_untrust( llGetOwnerKey( llList2Key( pending_command, 1 ) ) );
    } else if ( msg == "Off" ) {
        handle_commands( "Unlock", llGetKey(), "@detach=y", TRUE );
        llListenRemove( RLVRShandle );
        active = FALSE;
        llOwnerSay( "/me RLV Relay: Deactivated." );
    } else if ( msg == "No Trusted" ) {
        trusted = [ owner, master ];
        llOwnerSay( "/me RLV relay: Whitelist cleared." );
    } else if ( msg == "No Untrusted" ) {
        untrusted = [];
        llOwnerSay( "/me RLV relay: Blacklist cleared" );
    } else if ( msg == "Any Restrict" ) {
        allowOtherRestrict = TRUE;
        llOwnerSay( "/me RLV Relay: Anyone trusted can restrict you." );
    } else if ( msg == "Self Restrict" ) {
        allowOtherRestrict = FALSE;
        llOwnerSay( "/me RLV Relay: Only you can restrict yorself." );
    } else if ( msg == "Free Me" ) {
        llOwnerSay( "/me RLV Relay: Removing restrictions." );
        list restrainedBy = 
            llList2ListStrided(llDeleteSubList(restrictions, 0, 0), 0, -1, 2);
        integer c = llGetListLength( restrainedBy );
        integer i;
        for ( i=0; i < c; i++ ) {
            release_restrictions( llList2Key( restrainedBy, i ) );
        }
    } else if ( msg == "Unlock" ) {
        handle_commands( "Unlock", llGetKey(), "@detach=y", TRUE );
        llOwnerSay( "/me is unlocked and can be removed." );
    } else if ( msg == "External" ) {
        external = !external;
        if ( external ) {
            handle_commands( "Unlock", llGetKey(), "@detach=y", TRUE );
            llListenRemove( RLVRShandle );
            active = FALSE;
            llOwnerSay( "/me RLV Relay: Using external relay for client scripts." );
        } else {
            test_for_viewer();
        }
    } else if ( msg == "Help" ) {
        llLoadURL( llGetOwner(), "Documentation page", helpURL );
    }
}

agent_responses( string msg )
{
    if ( !active )
    {
        if ( llSubStringIndex( msg, "RestrainedLife viewer" ) == 0 ) {
            initialize();
        }
    }
        
}

// --------------------------------------------------------------------
// Communication
// --------------------------------------------------------------------
ack( string cmdID, key obj, string cmd, string ack )
{
    llRegionSay( RLVRS_CHANNEL, 
        llDumpList2String( [ cmdID, obj, cmd, ack ], "," ) );
}

sendCmd( string cmd )
{
    if ( cmd )
    {
        if ( active ) {
            llOwnerSay( cmd );
        }
    }
}

string key2name( key id )
{
    string name = llKey2Name( id );
    if ( name == "" ) {
        if ( id == master ) {
            return "secondlife:///app/agent/" + (string)id + "/username";
        } else if ( llGetLandOwnerAt( llGetPos() ) == id ) {
            return "the land owner here";
        } else {
            return "an unknown user or group";
        }
    }
    return name;
}

ask( string msg, list buttons )
{
    if ( allowOtherRestrict ) {
        msg += "\nAccept restrictions from: Trusted";
    } else {
        msg += "\nAccept restrictions from: Self only";
    }
    user_channel = -llGetUnixTime();
    llListenRemove( user_listener );
    user_listener = llListen( user_channel, "", owner, "" );
    llDialog( owner, "RESTRAINED LIFE RELAY\n" + msg, 
        buttons, user_channel );
    llSetTimerEvent( RESPONSE_TIMEOUT );
}

// --------------------------------------------------------------------
// Initialization
// --------------------------------------------------------------------

integer RLVRShandle;

test_for_viewer()
{
    if ( llGetAttached() ) {
        llSleep( 1.0 );
        if ( FLAG_FACE > 0 ) {
            vector color = llList2Vector( llGetLinkPrimitiveParams( LINK_ROOT,
                [ PRIM_COLOR, FLAG_FACE ] ), 0 );
            llSetLinkColor( LINK_ROOT, <color.x, color.y, FALSE>, FLAG_FACE );
        }
        agent_query( "@version" );
        llRequestPermissions( llGetOwner(),
            PERMISSION_TAKE_CONTROLS );
    }
}

initialize()
{
    active = TRUE;
    llOwnerSay( RLV_COMMAND_START );
    add_trust( llGetOwner() );
    add_trust( master );
    RLVRShandle = llListen( RLVRS_CHANNEL, "", NULL_KEY, "" );
    if ( FLAG_FACE > 0 ) {
        vector color = llList2Vector( llGetLinkPrimitiveParams( LINK_ROOT,
            [ PRIM_COLOR, FLAG_FACE ] ), 0 );
        llSetLinkColor( LINK_ROOT, <color.x, color.y, TRUE>, FLAG_FACE );
    }
    llOwnerSay( "/me RLV Relay: Activated" );
}

// --------------------------------------------------------------------
// Constants
// --------------------------------------------------------------------

integer RLVRS_PROTOCOL_VERSION = 1100;
string RLVRS_IMPLEMENTATION = "Mystic Gems 1.100; not fully compliant";

string PREFIX_RL_COMMAND = "@";
string PREFIX_METACOMMAND = "!";

integer RLVRS_CHANNEL = -1812221819;
integer AGENT_CHANNEL = 1812221819;

float MAX_OBJECT_DISTANCE = 100.;

string RLV_COMMAND_START = "@this-is-a-script-generated-message-beyond-the-control-of-the-agent=n,clear";
string RLV_COMMAND_END = "@detach=y";

float RESPONSE_TIMEOUT = 30.;

string INTERNAL_COMMAND_PREFIX = "Internal,";

integer RLV_MASK = 0x20000000;
string LINK_DELIM = "§";

string PREFIX_EXTENSION = "x-";

// ====================================================================
// Event handlers
// ====================================================================
default
{
    state_entry()
    {
        owner= llGetOwner();
        INTERNAL_COMMAND_PREFIX += (string)owner + ",";
        test_for_viewer();
        // llOwnerSay( llGetScriptName() + " initialized; " +
        //   (string)llGetFreeMemory() + " bytes free." );
    }

    on_rez( integer start )
    {
        owner = llGetOwner();
        active = FALSE;
        restrictions = [];
        test_for_viewer();
    }
    
    changed( integer change )
    {
        if ( change & CHANGED_OWNER)
        {
            llResetScript();
        }
    }

    listen( integer channel, string name, key id, string message )
    {
        if ( channel == AGENT_CHANNEL )
        {
            agent_responses( message );
        } else if ( channel == RLVRS_CHANNEL ) {
            relay_message( name, id, message );
        } else if ( channel == user_channel ) {
            dialog_responses( message );
        }
    }
    
    link_message( integer sender, integer num, string str, key id )
    {
        if ( num & RLV_MASK ) {
            // llOwnerSay( llGetScriptName() + ": " + str );
            string cmd = llGetSubString( str, 0, 3 );
            if ( str == llGetScriptName() ) {
                if ( active ) {
                    list menu = [ "Off", "Unlock", "External", 
                        "No Trusted", "No Untrusted", "Help", "Free Me" ];
                    if ( allowOtherRestrict ) {
                        menu += [ "Self Restrict" ];
                    } else {
                        menu += [ "Any Restrict" ];
                    }
                    ask( "Main Menu", menu );
                } else {
                    llOwnerSay( "/me RLV Relay: Activating client-side scripting." );
                    test_for_viewer();
                }
            } else if ( cmd == "rlvr" && active ) {
                list parsed = llParseString2List( str, [ "§" ], [] );
                string cmd = llList2String( parsed, 1 );
                if ( cmd == "master" ) {
                    master = (key)llList2String( parsed, 2 );
                    if ( master == llGetOwner() ) {
                        master = NULL_KEY;
                    } else {
                        llOwnerSay( "Trusting secondlife:///app/agent/" 
                            + (string)master + "/inspect" );
                    }
                } else if ( external ) {
                    llWhisper( RLVRS_CHANNEL, 
                        INTERNAL_COMMAND_PREFIX + cmd );
                } else {
                    relay_message( llGetObjectName(), llGetKey(),
                        INTERNAL_COMMAND_PREFIX + cmd );
                }
            } else if ( cmd == "diag" ) {
                llWhisper( 0, "/me RLV CLIENT" +
                    "\n" + (string)llGetFreeMemory() + " bytes free."
                    + "\nTrusting: " + llList2CSV( trusted )
                    + "\nIgnoring: " + llList2CSV( untrusted )
                    );
            } else if ( cmd == "rset" ) {
                llResetScript();
            }
        }
    }
    
    timer()
    {
        if ( agentListen )
        {
            llListenRemove( agentListen );
            agentListen = FALSE;
            llSetTimerEvent( 0. );
        }
        if ( user_listener )
        {
            llListenRemove( user_listener );
            llSetTimerEvent( 0. );
        }
    }
    
    run_time_permissions( integer perm )
    {
        if ( perm & PERMISSION_TAKE_CONTROLS ) {
            llTakeControls( 1024, FALSE, TRUE );
        }
    }
}
// Copyright ©2011 Jack Abraham and player, all rights reserved
// Contact Guardian Karu in Second Life for distribution rights